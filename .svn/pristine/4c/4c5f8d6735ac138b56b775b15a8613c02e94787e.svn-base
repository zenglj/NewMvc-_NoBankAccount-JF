using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using SelfhelpOrderMgr.Model;
using SelfhelpOrderMgr.BLL;
using System.Data;

namespace SelfhelpOrderMgr.Web.Controllers
{
    public class BankRptController : Controller
    {

        //
        // GET: /BankRpt/
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult BankDataReset()
        {
            return View();
        }

        public ActionResult GetBankDataInfo()
        {
            string strLoginName = new T_CZYBLL().GetModel(Session["loginUserCode"].ToString()).FName;

            string action = Request["action"].ToString();
            string startDt = Request["startDate"];
            string endDt = Request["endDate"];
            string rcvpay = Request["rcvpay"];


            if (action == "GetList" && !(string.IsNullOrEmpty(startDt)))
            {
                DateTime startDate = Convert.ToDateTime(startDt);
                DateTime endDate = Convert.ToDateTime(endDt);

                List<T_EdiMainOrder> list = (List<T_EdiMainOrder>)new T_EdiListBLL().GetListByDate( startDate, endDate);
                JavaScriptSerializer jss = new JavaScriptSerializer();
                //if (list == null)
                //{
                //    T_EdiMainOrder m1 = new T_EdiMainOrder();
                //    list.Add(m1);
                //}

                Response.Write(jss.Serialize(list));
            }
            else if (action == "ExcelOutport" && !(string.IsNullOrEmpty(startDt)))
            {
                DateTime startDate = Convert.ToDateTime(startDt);
                DateTime endDate = Convert.ToDateTime(endDt);
                string rcvFlag = Request["rcvFlag"];
                string payFlag = Request["payFlag"];

                string strSql = @"select isnull(MainSeqno,'') 主单号,isnull(remark,'') 摘要,UploadDate 上传日期,case DetailDownloadflag* succflag when 1 then '成功' when -1 then '失败' when -2 then '手工复位' else '已发送' end 状态
                        ,case isnull(resetflag,0) when 1 then '已复位' else '' end 复位情况
                         from t_EdiList
                        where code<>'yhyewj' and UploadDate>='" + startDt.ToString() + "' and UploadDate<'" + endDt.ToString() + "' order by MainSeqno desc";

                

                DataTable dt=new CommTableInfoBLL().GetDataTable(strSql);

                string strFileName = new CommonClass().GB2312ToUTF8(strLoginName + "_BankDataEdiOrder.xls");
                strFileName = Server.MapPath("~/Upload/" + strFileName); ;
                //ExcelRender.RenderToExcel(dt, context, strFileName);
                ExcelRender.RenderToExcel(dt, strFileName);
                return Content("OK|" + strLoginName + "_BankDataEdiOrder.xls");

            }
            else if (action == "resetFlag" && !(string.IsNullOrEmpty(startDt)))
            {
                DateTime startDate = Convert.ToDateTime(startDt);
                DateTime endDate = Convert.ToDateTime(endDt);
                string mainSeqno = Request["MainSeqno"];
                string uploadDate = Request["UploadDate"];
                string resultStr = "Error.上传日期无效";
                int bjDt = DateTime.Compare(Convert.ToDateTime(uploadDate), DateTime.Today);

                if (bjDt < 0)
                {
                    List<T_EdiMainOrder> MainList = (List<T_EdiMainOrder>)new T_EdiListBLL().GetListByMainSeqno( Convert.ToInt32(mainSeqno));
                    if (MainList[0].ResetFlag == "已复位")
                    {
                        resultStr = "Error.该记录已经复位了，无需再复位!";
                    }
                    else
                    {
                        if (MainList[0].SuccFlag == "已发送")
                        {
                            new T_EdiListBLL().UpdateByMainSeqno( Convert.ToInt32(mainSeqno), -2, 1);

                            resultStr = "OK.复位成功";
                        }
                        else
                        {
                            resultStr = "Error.只有处于【已发送】状态才可以复位！";
                        }
                    }
                }
                else
                {
                    resultStr = "Error.当天上传的数据不能复位";
                }
                return Content(resultStr);
            }
            else
            {
                List<T_VeryDay_RcvPay> list = new List<T_VeryDay_RcvPay>();
                JavaScriptSerializer jss = new JavaScriptSerializer();

                T_VeryDay_RcvPay m1 = new T_VeryDay_RcvPay();
                list.Add(m1);
                return Content(jss.Serialize(list));
            }
            return Content("");
        }

        public ActionResult EdiMainRcvPay()
        {
            return View();
        }

        public ActionResult GetEdiMainRcvPayInfo()
        {
            string strLoginName = new T_CZYBLL().GetModel(Session["loginUserCode"].ToString()).FName;

            string action = Request["action"].ToString();
            string startDt = Request["startDate"];
            string endDt = Request["endDate"];
            string rcvpay = Request["rcvpay"];
            if (action == "GetTmpRcvPay" && !(string.IsNullOrEmpty(startDt)))
            {
                DateTime startDate = Convert.ToDateTime(startDt);
                DateTime endDate = Convert.ToDateTime(endDt);

                List<T_TmpRcvPay> list = (List<T_TmpRcvPay>)new T_TmpRcvPayBLL().GetTmpRcvPay( startDate, endDate, rcvpay);
                JavaScriptSerializer jss = new JavaScriptSerializer();
                if (list.Count <= 0)
                {
                    T_TmpRcvPay m1 = new T_TmpRcvPay();
                    list.Add(m1);
                }

                return Content(jss.Serialize(list));
            }
            else if (action == "ExcelOutport" && !(string.IsNullOrEmpty(startDt)))
            {
                DateTime startDate = Convert.ToDateTime(startDt);
                DateTime endDate = Convert.ToDateTime(endDt);
                string rcvFlag = Request["rcvFlag"];
                string payFlag = Request["payFlag"];
                if (rcvFlag != null && payFlag == null)
                {
                    rcvpay = "rcv";
                }
                else if (rcvFlag == null && payFlag != null)
                {
                    rcvpay = "pay";
                }
                else
                {
                    rcvpay = "all";
                }

                string strSql = @"exec tmprcvPay '" + Convert.ToString(startDate) + "','" + Convert.ToString(endDate) + "','" + rcvpay + "'";
                new CommTableInfoBLL().ExecSql( strSql);

                //列名:AccNo	Dtype	paydate	Fmoney	SucMoney	ErrMoney
                strSql = @"select BankName 银行账户,AccNo 主单号,Dtype 类型,paydate 日期,Fmoney 总金额,SucMoney 成功金额,ErrMoney 失败金额,Remark 摘要 from t_tmpRcvpay order by paydate,accno,dtype";
                DataTable dt = new CommTableInfoBLL().GetDataTable( strSql);
                

                string strFileName = new CommonClass().GB2312ToUTF8(strLoginName + "_BankRcvPaySum.xls");
                strFileName = Server.MapPath("~/Upload/" + strFileName); ;
                //ExcelRender.RenderToExcel(dt, context, strFileName);
                ExcelRender.RenderToExcel(dt, strFileName);
                return Content("OK|" + strLoginName + "_BankRcvPaySum.xls");
            }
            else
            {
                List<T_TmpRcvPay> list = new List<T_TmpRcvPay>();
                JavaScriptSerializer jss = new JavaScriptSerializer();

                T_TmpRcvPay m1 = new T_TmpRcvPay();
                list.Add(m1);

                return Content(jss.Serialize(list));
            }
            return Content("");
        }
	}
}