
using SelfhelpOrderMgr.BLL;
using SelfhelpOrderMgr.Model;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;

namespace SelfhelpOrderMgr.Web.Controllers
{
    public class ShoppingController :LoginController
    {
        JavaScriptSerializer jss = new JavaScriptSerializer();
        public ActionResult Index(int id=1)//默认1是超市消费
        {
            //取消原来有在管理表设定的模式，改用在T_Sho_SaleType表设定
            //if (id == 1)
            //{
            //    T_SHO_ManagerSet mgrset = new T_SHO_ManagerSetBLL().GetModel("ShoppingFlag");
            //    if (mgrset != null)
            //    {
            //        if (mgrset.MgrValue == "0")
            //        {
            //            return View("StopShoppingNotice");
            //        }
            //    }
            //}
            
            
            int saleTypeId = id;
            T_SHO_SaleType saletype = new T_SHO_SaleTypeBLL().GetModel(saleTypeId);

            if (saletype.ShoppingFlag == 0)
            {
                return View("StopShoppingNotice");
            }

            ViewData["ptype"] = saletype.PType;
            ViewData["saleTypeId"] = saleTypeId;
            List<T_GoodsType> types = (List<T_GoodsType>)new T_GoodsTypeBLL().GetListOfIEnumerable("SaleTypeId="+ id.ToString() +"");
            ViewData["types"] = types;
            string strTypes = "";
            foreach (T_GoodsType type in types)
            {
                if (strTypes == "")
                {
                    strTypes = "'"+type.Fcode+"'";
                }
                else
                {
                    strTypes = strTypes+",'" + type.Fcode + "'";
                }
            }
            List<T_Goods> goods = new List<T_Goods>();
            if(strTypes!="")
            {
                goods = (List<T_Goods>)new T_GoodsBLL().GetListOfIEnumerable("Active='Y' and GTYPE in(" + strTypes + ")");
            }
            else
            {
                goods = (List<T_Goods>)new T_GoodsBLL().GetListOfIEnumerable("Active='Y' and GTYPE =''");
            }
            ViewData["goods"] = goods;

            T_SHO_ManagerSet mset = new T_SHO_ManagerSetBLL().GetModel("XiaoPiaoStyle");
            ViewData["mset"] = mset;

            T_SHO_ManagerSet loginMode = new T_SHO_ManagerSetBLL().GetModel("LoginMode");
            ViewData["loginMode"] = loginMode.MgrValue;
            return View();

        }

        public ActionResult About()
        {
            ViewBag.Message = "Your application description page.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }

        //获取用户IC卡信息
        public ActionResult GetCardInfo()
        {
            string userCode = Request["userCode"];
            string userPwd = Request["userPwd"];
            if(string.IsNullOrEmpty(userCode))
            {
                return Content("Err|用户名或是密码有错");
            }
            if (string.IsNullOrEmpty(userPwd))
            {
                userPwd="";
            }
            List<T_ICCARD_LIST> cardInfos = new T_ICCARD_LISTBLL().GetModelList("FCrimeCode='" + userCode + "' and isnull(FPWD,'')='" + userPwd + "' and FFlag in(1,2)");
            if (cardInfos.Count == 1)
            {
                if (cardInfos[0].FFlag==2)
                {
                    return Content("Err|抱歉,您的IC卡已经挂失了");
                }
                return Content("OK|" + cardInfos[0].CardCode.ToString());
            }
            return Content("Err|用户名或是密码有错");
        }

        //增加订单的主单
        public ActionResult AddOrder()
        {
            string saleTypeId= Request["saleTypeId"];
            if (string.IsNullOrEmpty(saleTypeId) == true)
            {
                saleTypeId = "1";//如果没有传递相关信息过来，则默认为1超市消费.
            }
            if (saleTypeId == "1")
            {
                
            }
            string fcardCode = Request["FCardCode"];
            string checkflag = Request["checkFlag"];
            string ip = System.Web.HttpContext.Current.Request.UserHostAddress;

            
            

            //string ip = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
            string status = "Error|申请失败";
            if (string.IsNullOrEmpty(fcardCode))
            {
                return Content(status);
            }
            if(fcardCode.Length!=10)
            {
                return Content(status);
            }
            List<T_Criminal_card> cards = (List<T_Criminal_card>)new T_Criminal_cardBLL().GetModelList("CardCodeA='" + fcardCode.ToString() + "'");

            #region 验证IC卡状态
            if (cards.Count == 0)
            {
                status = "Error|该卡找不对应人员信息";
                return Content(status);
            }
            switch (cards[0].cardflaga)
            {
                case 4:
                    {
                        return Content("Error|用户已经离监，IC卡已经停用");
                    }
                case 3:
                    {
                        return Content("Error|IC卡已作废，不能用");
                    }
                case 2:
                    {
                        return Content("Error|IC卡已挂失，不能用");
                    }
                default:
                    break;
            }
                        
            #endregion

            #region 验证银行卡是允许未注册消费
            T_SHO_ManagerSet mbankRegFlag = new T_SHO_ManagerSetBLL().GetModel("BankRegFlag");
            if (mbankRegFlag != null)
            {
                if (mbankRegFlag.MgrValue == "1")
                {
                    if (cards[0].RegFlag == null)
                    {
                        return Content("Error|银行卡未开通过，不能用消费");
                    }
                    if (cards[0].RegFlag == 0)
                    {
                        return Content("Error|银行卡未开通过，不能用消费");
                    }
                }
            }
            else
            {
                if (cards[0].RegFlag == null)
                {
                    return Content("Error|银行卡未开通过，不能用消费");
                }
                if (cards[0].RegFlag == 0)
                {
                    return Content("Error|银行卡未开通过，不能用消费");
                }
            } 
            #endregion
            

            string fcrimeCode = cards[0].fcrimecode;
            T_Criminal criminal = new T_CriminalBLL().GetCriminalXE_info(fcrimeCode, Convert.ToInt32(saleTypeId));

            if(criminal.AmountAmoney<0 )
            {
                if (criminal.dongjieMoney + criminal.AmountBmoney >= 0)
                {
                    return Content("Error|该账户有冻结" + criminal.dongjieMoney.ToString() + " 元，余额不足，不能消费，请与管理人员联系");
                }
                return Content("Error|该账户A账出现负数不能消费，请与管理人员联系");
            }

            if (criminal.AmountBmoney < 0)
            {
                if (criminal.dongjieMoney+ criminal.AmountBmoney>=0)
                {
                    return Content("Error|该账户有冻结" + criminal.dongjieMoney.ToString() + " 元，余额不足，不能消费，请与管理人员联系");
                }
                return Content("Error|该账户B账出现负数不能消费，请与管理人员联系");

            }

            if (criminal.AmountCmoney < 0)
            {
                return Content("Error|该账户C账出现负数不能消费，请与管理人员联系");
            }

            if (criminal.CanUseMoneyA < 0)
            {
                return Content("Error|A账户已经超过本月最大可消费额度了，请与管理人员联系");
            }
            if (criminal.CanUseMoneyB < 0)
            {
                return Content("Error|B账户已经超过本月最大可消费额度了，请与管理人员联系");
            }


            //验证是否在该管理卡权限范围内的人员
            #region 消费人员卡，是否可以在本机消费管理卡
            T_SHO_ManagerSet mcardFlag = new T_SHO_ManagerSetBLL().GetModel("CheckManagerCardFlag");
            T_SHO_ManagerSet mset = new T_SHO_ManagerSetBLL().GetModel(ip);

            if (mcardFlag != null)
            {
                if (mcardFlag.MgrValue == "1")
                {                    
                    if (mset == null)
                    {
                        return Content("Error|该机没有管理卡开通不能消费");
                    }
                    List<T_Criminal> cnls = new T_CriminalBLL().GetModelList(@" fareacode in (select fareacode from t_czy_area a,t_czy b where a.fcode=b.fcode and a.fflag=2 and b.fmanagerCard='" + mset.MgrValue + "' ) and fcode='" + criminal.FCode + "'");
                    if (cnls.Count == 0)
                    {
                        return Content("Error|对不起，您不能在本机购物，请回到" + criminal.FAreaName + "购物，谢谢");
                    }
                }
            } 
            #endregion
            


            //查询是有未提交的订单
            if (checkflag == "1")
            {
                T_SHO_SaleType stype=new T_SHO_SaleTypeBLL().GetModel(Convert.ToInt32( saleTypeId));
                List<T_SHO_Order> orders = new T_SHO_OrderBLL().GetModelList(" fcrimecode='" + fcrimeCode + "' and (flag=0 or (flag=1 and isnull(InvoiceNo,'')='')) and PType='" + stype.PType + "' and crtdate>='" + DateTime.Today.ToShortDateString() + "' and CrtDate<'" + DateTime.Now.ToString() + "'");
                if (orders.Count > 0)
                {
                    status = "";
                    foreach(T_SHO_Order order in orders)
                    {
                        if(order.Flag==1 && order.InvoiceNo=="")//如果Flag=1且InvoiceNo是空的，就将它改为Flag=0
                        {
                            order.Flag = 0;
                            new T_SHO_OrderBLL().Update(order);
                        }
                        List<T_SHO_OrderDTL> dtls = new T_SHO_OrderDTLBLL().GetModelList("OrderId='" + order.OrderID + "'");
                        if (dtls.Count>0)
                        {
                            status = GetOrderListInfo(status, criminal, orders);//获取订单列表信息
                        }
                        else
                        {
                            new T_SHO_OrderBLL().Delete(order.OrderID);
                        }
                    }
                    if(status=="")
                    {//显示并创建订单信息
                        status = DisplayAddOrder(fcrimeCode, ip, status, criminal, saleTypeId);
                    }
                }
                else
                {//显示并创建订单信息
                    status = DisplayAddOrder(fcrimeCode, ip, status, criminal, saleTypeId);
                }
            }
            else
            {
                //显示并创建订单信息
                status = DisplayAddOrder(fcrimeCode, ip, status, criminal, saleTypeId);
            }
            return Content(status);
        }

        private static string GetOrderListInfo(string status, T_Criminal criminal, List<T_SHO_Order> orders)
        {
            //status = "There|" + orders[0].OrderID.ToString() + "|" + criminal.FName + "|" + criminal.CyName + "|" + (criminal.NoXiaofeimoney - (orders[0].FAmount-orders[0].FreeAmount)).ToString()+"|"+ criminal.OkUseAllMoney.ToString()+"|" + orders[0].FAmount.ToString();
            decimal yue = criminal.NoXiaofeimoney - (orders[0].FAmount - orders[0].FreeAmount);
            criminal.NoXiaofeimoney = yue;
            rtnStatus rts = new rtnStatus();
            rts.orderId = orders[0].OrderID;
            rts.FName = criminal.FName;
            rts.cyName = criminal.CyName;
            rts.FAreaName = criminal.FAreaName;
            rts.FCrimeCode = criminal.FCode;
            rts.NoXiaofeimoney = criminal.NoXiaofeimoney;
            rts.OkUseAllMoney = criminal.OkUseAllMoney;
            rts.orderMoney = orders[0].FAmount;
            JavaScriptSerializer css = new JavaScriptSerializer();

            List<T_SHO_OrderDTL> details = new T_SHO_OrderDTLBLL().GetModelList("OrderId='" + orders[0].OrderID.ToString() + "'");

            rts.lists = details;
            //status = status + "|" + strDtl ;
            status = css.Serialize(rts);
            status = "There|" + status;
            return status;
        }

        private static string DisplayAddOrder(string fcrimeCode, string ip, string status, T_Criminal criminal,string saleTypeId)
        {
            //删除该犯人的所有临时订单信息
            new T_SHO_OrderBLL().DeleteOrderInfoByFCrimecode(fcrimeCode,saleTypeId);

            //T_Criminal criminal = new T_CriminalBLL().GetCriminalXE_info(fcrimeCode);
            T_SHO_SaleType saletype = new T_SHO_SaleTypeBLL().GetModel(Convert.ToInt32(saleTypeId));
            string crtby = "";
            string cc = ".";
            string[] ips = ip.Split(cc.ToCharArray());
            //string ipLastCode = string.Format("000", ips[3]);
            string ipLastCode = "001";
            if (ips.Length > 3)
            {
                ipLastCode = "000" + ips[3];
                ipLastCode = ipLastCode.Substring(ipLastCode.Length - 3);
            }
            crtby = "IP_" + ipLastCode + "号机";

            T_SHO_ManagerSet mOpenMode = new T_SHO_ManagerSetBLL().GetModel("OpenMode");
            if(mOpenMode.KeyMode==1)
            {
                T_SHO_ManagerSet mset = new T_SHO_ManagerSetBLL().GetModel(ip);
                List<T_CZY> mcardCzys = new T_CZYBLL().GetModelList("FManagerCard='" + mset.MgrValue + "'");
                if (mcardCzys.Count>0)
                {
                    crtby = mcardCzys[0].FName+"_"+crtby;
                }                
            }
            

            
            


            T_SHO_Order model = new T_SHO_Order();
            model.FCrimecode = fcrimeCode;
            model.FCriminal = criminal.FName;
            model.CrtDate = DateTime.Now;
            model.Flag = 0;
            model.FAmount = 0;
            model.PType = saletype.PType;
            model.InvoiceNo = "";
            model.IPAddr = ip;
            model.FreeAmount = 0;
            model.RoomNO = "";
            model.CrtBy = crtby;
            int inumber = new T_SHO_OrderBLL().Add(model);
            if (inumber > 0)
            {
                //status = "OK|" + inumber.ToString() + "|" + criminal.FName + "|" + criminal.CyName + "|" + criminal.NoXiaofeimoney.ToString()+"|"+criminal.OkUseAllMoney.ToString()+"|0.00";
                rtnStatus rts = new rtnStatus();
                rts.orderId = inumber;
                rts.FName = criminal.FName;
                rts.cyName = criminal.CyName;
                rts.NoXiaofeimoney = criminal.NoXiaofeimoney;
                rts.OkUseAllMoney = criminal.OkUseAllMoney;
                rts.Xiaofeimoney = criminal.Xiaofeimoney;
                rts.orderMoney = 0;
                rts.FAreaName = criminal.FAreaName;
                rts.FCrimeCode = criminal.FCode;
                JavaScriptSerializer css = new JavaScriptSerializer();
                status = css.Serialize(rts);
                status = "OK|" + status;

            }
            return status;
        }


        public ActionResult SearchGoodsInfo()
        {
            string status = "Error|没有相应的商品";
            string gtxm = Request["Gtxm"];
            string saleTypeId = Request["saleTypeId"];
            string ptype = "";
            List<T_GoodsType> types = new T_GoodsTypeBLL().GetModelList("SaleTypeId='" + saleTypeId+"'" );
            if (types.Count > 0)
            { 
                foreach(T_GoodsType type in types)
                {
                    if (ptype == "") 
                    {
                        ptype = "'" + type.Fcode + "'";
                    }
                    else
                    {
                        ptype = ptype+",'" + type.Fcode + "'";
                    }
                }
                List<T_Goods> goods = new T_GoodsBLL().GetModelList("Gtxm='" + gtxm + "' and GType in (" + ptype + ")");
                if(goods.Count>0)
                {
                    if(goods[0].ACTIVE=="N")
                    {
                        status = "Error|抱谦，该商品已经下架了";
                    }
                    else
                    {
                        status = "OK|" + jss.Serialize(goods[0]);
                    }                    
                }
                else
                {
                    status = "Error|没有查询到您要的商品";
                    if (!string.IsNullOrEmpty(gtxm))
                    {
                        goods = new T_GoodsBLL().GetModelList("SPShortCode='" + gtxm + "' and GType in (" + ptype + ")");
                        if (goods.Count > 0)
                        {
                            //JavaScriptSerializer jss = new JavaScriptSerializer();
                            if (goods[0].ACTIVE == "N")
                            {
                                status = "Error|抱谦，该商品已经下架了";
                            }
                            else
                            {
                                status = "OK|" + jss.Serialize(goods[0]);
                            }   
                        }
                    }                    
                }
                
            }
            else
            {
                status = "Error|您现在操作消费类型不存在";
            }
            
            return Content(status);
        }

        //增加订单明细
        public ActionResult AddOrderDetail()
        {
            string orderId = Request["OrderId"];
            string gtxm = Request["GTXM"];
            string gcount = Request["GCount"];
            string goodRemark = Request["goodRemark"];//商品的品味、尺码等信息
            if (string.IsNullOrEmpty(goodRemark) == true)//如果提交没有说明则为空
            {
                goodRemark = "";
            }
            if(string.IsNullOrEmpty(orderId)==true)
            {
                return Content("Error|订单号不能为空");
            }
            string status = "Error|添加失败";
            //获取商品信息
            T_Goods good = new T_GoodsBLL().GetModel(gtxm);
            
            if (good == null)
            { //查店内码
                List<T_Goods> goods = new T_GoodsBLL().GetModelList("[SPShortCode]='" + gtxm + "'");
                if (goods.Count == 1)
                {
                    good = goods[0];
                    gtxm = good.GTXM;
                }
            }
            if (good.ACTIVE != "Y")
            {
                return Content("Error|该商品已经下架了，不能购买");
            }
            if (good != null)
            {
                
                if (Convert.ToDecimal(gcount) > Convert.ToDecimal(good.Xgsl)) //判断是否超过最大限购数量
                {
                    status = "Error|你超过了最大购买数量，"+ good.Xgsl.ToString()+"个！";
                    return Content(status);
                }
                

                //判断本月是否超过最大限购数量
                T_SHO_Order order = new T_SHO_OrderBLL().GetModel(Convert.ToInt32(orderId));
                decimal monthGcount = new T_SHO_OrderBLL().GetMonthBuyCount(gtxm,order.FCrimecode);
                decimal buyGcount = Convert.ToDecimal(monthGcount) + Convert.ToDecimal(gcount);
                if (buyGcount > Convert.ToDecimal(good.Xgsl))
                {
                    status = "Error|你本月已经购买了" + monthGcount.ToString() + "个，再购就超过了最大购买数量，" + good.Xgsl.ToString() + "个！";
                    return Content(status);
                }

                T_SHO_OrderDTL model = new T_SHO_OrderDTL();
                model.OrderID = Convert.ToInt32(orderId);
                model.GCode = good.GCODE;
                model.GTXM = gtxm;
                model.GName = good.GNAME;
                model.GPrice = (decimal)good.GDJ;
                model.GCount = Convert.ToDecimal(gcount);
                model.GAmount = (decimal)good.GDJ * Convert.ToDecimal(gcount);
                model.Flag = 0;
                model.Remark = goodRemark;//保存商品的品味、尺码等信息
                model.SPShortCode = good.SPShortCode;
                if (good.Ffreeflag == 1)//设定商品是否是非限额的
                {
                    model.FreeFlag = (int)good.Ffreeflag;
                }
                else
                {
                    model.FreeFlag = 0;
                }

                //T_SHO_Order order = new T_SHO_OrderBLL().GetModel(model.OrderID);
                List<T_SHO_SaleType> saleTypes = new T_SHO_SaleTypeBLL().GetModelList("PType='" + order.PType + "'");
                T_Criminal criminal = new T_CriminalBLL().GetCriminalXE_info(order.FCrimecode,saleTypes[0].ID);
                
                

                T_SHO_ManagerSet xgMode = new T_SHO_ManagerSetBLL().GetModel("XianGouMode");

                string XgFlag = "0";
                if(xgMode!=null)
                {
                    XgFlag = xgMode.MgrValue;
                }

                if(XgFlag=="1")
                {
                    //判断是否超过单品队别本月最大限购数量

                    string ip = System.Web.HttpContext.Current.Request.UserHostAddress;
                    T_SHO_ManagerSet msetIp = new T_SHO_ManagerSetBLL().GetModel(ip);

                    List<T_CZY> czys = new T_CZYBLL().GetModelList("FManagerCard='" + msetIp.MgrValue + "' ");
                    if (czys.Count<=0)
                    {
                        status = "Error|你的机器未登录，不能消费！";
                        return Content(status);
                    }
                    List<T_AREA> areas=new T_AREABLL().GetModelList("FName='"+ czys[0].FUserArea +"'");

                    if(areas.Count<=0)
                    {
                        status = "Error|您的登录名未分配指定的使用队别，不能消费！";
                        return Content(status);
                    }
                    
                    T_SHO_AreaGoodMaxCount areaMaxModel = new T_SHO_AreaGoodMaxCountBLL().GetModel(areas[0].FCode, good.GTXM);

                    if (!new T_SHO_AreaGoodMaxCountBLL().GetLoginNameBuyCountByGtxm(czys[0].FName, Convert.ToDecimal(gcount), good.GTXM, areas[0].FCode))
                    {
                        status = "Error|你所在队别已经超过了本月最大购买数量！";
                        return Content(status);
                    }
                }
                else
                {
                    //判断是否超过单品队别本月最大限购数量
                    T_SHO_AreaGoodMaxCount areaMaxModel = new T_SHO_AreaGoodMaxCountBLL().GetModel(criminal.FAreaCode, good.GTXM);

                    if (!new T_SHO_AreaGoodMaxCountBLL().GetAreaBuyCountByGtxm(criminal.FCode, Convert.ToDecimal(gcount), good.GTXM, criminal.FAreaCode))
                    {
                        status = "Error|你所在队别已经超过了本月最大购买数量！";
                        return Content(status);
                    }
                }

                // 验证库存量
                T_SHO_ManagerSet mset = new T_SHO_ManagerSetBLL().GetModel("YanZhenKCL");
                if (mset.KeyMode == 1)
                {
                    List<T_GOODSSTOCKMAIN> gstocks = new T_GOODSSTOCKMAINBLL().GetModelList("GCode='"+ good.GCODE +"'");
                    if(gstocks==null)
                    {
                        status = "Error|当前库存量为0，您本次购买量超过最大库存了！";
                        return Content(status);
                    }
                    if(buyGcount>gstocks[0].BALANCE)
                    {
                        status = "Error|当前库存量为" + gstocks[0].BALANCE.ToString() + "，您本次购买量超过最大库存了！";
                        return Content(status);
                    }
                }

                string strFreeFlag = "0";
                if (good.Ffreeflag == 1)//如果是非限制商品
                {
                    strFreeFlag = "1";
                    if (criminal.OkUseAllMoney >= (order.FAmount + model.GAmount))
                    {
                        //执行订单明细记录插入
                        status = DoAddOrderDetail(status, model, strFreeFlag);
                    }
                    else
                    {
                        status = "Error|账户当前总余额不足";

                    }
                }
                else
                {
                    strFreeFlag = "0";
                    status = "Error|可消费余额不足";
                    if (criminal.NoXiaofeimoney >= (order.FAmount -order.FreeAmount + model.GAmount))//看下钱是否够扣
                    {
                        //如果金额可消费金额有够，判断总的可用金额够吗
                        if (criminal.OkUseAllMoney >= (order.FAmount + model.GAmount))//看下钱是否够扣
                        {
                            //执行订单明细记录插入
                            status = DoAddOrderDetail(status, model, strFreeFlag);
                        }                        
                    }
                    //else
                    //{
                    //    status = "Error|可消费余额不足";
                    //}
                }
            }
            return Content(status);
        }

        private static string DoAddOrderDetail(string status, T_SHO_OrderDTL model, string strFreeFlag)
        {
            //2016-10-29日 曾林进 取消单步执行模式，改采用Dapper事务模式
            //int i = new T_SHO_OrderDTLBLL().Add(model);
            //if (i > 0)
            //{
            //    if (new T_SHO_OrderBLL().UpdateMoney((int)model.OrderID, (decimal)model.GAmount, strFreeFlag))
            //    {
            //        JavaScriptSerializer jss = new JavaScriptSerializer();
            //        T_SHO_OrderDTL dtl=new T_SHO_OrderDTLBLL().GetModel(i);
            //        status = "OK|" + i.ToString() + "|" + model.GAmount.ToString() + "|" + strFreeFlag+"|"+ jss.Serialize(dtl) ;
            //    }
            //    else
            //    {
            //        status = "Error|更新主单金额失败";
            //    }
            //}
            //return status;

            //2016-10-29日 曾林进 采用事务方式进行，解决之前明细有写，主单金额没有更新问题
            int i = new T_SHO_OrderDTLBLL().AddDetailAndUpdateMain(model,strFreeFlag);
            if (i > 0)
            {
                JavaScriptSerializer jss = new JavaScriptSerializer();
                T_SHO_OrderDTL dtl = new T_SHO_OrderDTLBLL().GetModel(i);
                status = "OK|" + i.ToString() + "|" + model.GAmount.ToString() + "|" + strFreeFlag + "|" + jss.Serialize(dtl);

            }
            else
            {
                status = "Error|更新主单金额失败";
            }
            return status;
        }

        //获取订单明细记录
        public ActionResult GetOrderDetails()
        {
            string orderid =Request["orderId"];
            if(string.IsNullOrEmpty(orderid)!=true)
            {
                List<T_SHO_OrderDTL> dtls = new T_SHO_OrderDTLBLL().GetModelList("OrderId='" + orderid + "'");
                return Content("OK|"+jss.Serialize(dtls));
            }
            return Content("Err|没有记录");
        }
        public ActionResult OrderDetail()
        {
            string orderId = Request["OrderId"];

            List<T_SHO_OrderDTL> types = (List<T_SHO_OrderDTL>)new T_SHO_OrderDTLBLL().GetModelList("");
            ViewData["types"] = types;
            List<T_Goods> goods = (List<T_Goods>)new T_GoodsBLL().GetListOfIEnumerable("");
            ViewData["goods"] = goods;
            return View();
        }

        //删除一条订单明细记录
        public ActionResult DelOrderDetail()
        {
            string orderId = Request["OrderId"];
            string id = Request["Id"];
            if (new T_SHO_OrderBLL().DelOrderDetailAndUpdateMoney(Convert.ToInt32(orderId), Convert.ToInt32(id)))
            {
                T_SHO_Order order = new T_SHO_OrderBLL().GetModel(Convert.ToInt32(orderId));
                List<T_SHO_SaleType> saleTypes=new T_SHO_SaleTypeBLL().GetModelList("PType='"+ order.PType +"'");
                T_Criminal criminal = new T_CriminalBLL().GetCriminalXE_info(order.FCrimecode,saleTypes[0].ID);
                //decimal yue = criminal.NoXiaofeimoney - (order.FAmount - order.FreeAmount);
                //criminal.NoXiaofeimoney = yue;

                string status = "";
                List<T_SHO_Order> orders = new T_SHO_OrderBLL().GetModelList(" OrderId='" + orderId + "'");
                status = GetOrderListInfo(status, criminal, orders);//获取订单列表信息
                return Content(status);
            }
            else
            {
                return Content("Error|删除明细记录失败");
            }

        }
        public ActionResult SubmitOrder()//提交订单
        {
            string orderId = Request["OrderId"];
            string fcrimecode = Request["FCrimeCode"];
            string crtby = Request["crtby"];
            string userRoomNo = Request["userRoomNo"];

            if(string.IsNullOrEmpty(orderId)==true)
            {
                return Content("Err|订单号不能为空。");
            }
            if (string.IsNullOrEmpty(fcrimecode) == true)
            {
                return Content("Err|用户编号不能为空。");
            }

            if (string.IsNullOrEmpty(userRoomNo) == true)
            {
                return Content("Err|房间号不能为空。");
            }

            if (new T_InvoiceBLL().Exists(Convert.ToInt32(orderId)))
            {
                return Content("Error|该订单号已经结算过了，不能再重复结算（提交提示）");
            }

            userRoomNo = Convert.ToInt32(userRoomNo).ToString(); //改为一位数
            string ipaddr = System.Web.HttpContext.Current.Request.UserHostAddress;
            
            List<T_SHO_ClientMachine> machine = new T_SHO_ClientMachineBLL().GetModelList("IpAddr='" + ipaddr + "'");
            if (machine.Count > 0) 
            {
                crtby = machine[0].ClientName;
            }
            string cc = ".";
            string[] ips = ipaddr.Split(cc.ToCharArray());
            //string ipLastCode = string.Format("000", ips[3]);
            string ipLastCode = "001";
            if (ips.Length > 3)
            {
                ipLastCode = "000" + ips[3];
                ipLastCode = ipLastCode.Substring(ipLastCode.Length - 3);
            }
            crtby = "IP_" + ipLastCode + "号机";
            T_SHO_Order orderModel =new T_SHO_OrderBLL().GetModel(Convert.ToInt32(orderId));
            //如果订单操作员有存在就直接用订单的操作员
            if(string.IsNullOrEmpty(orderModel.CrtBy)==false)
            {
                crtby = orderModel.CrtBy;
            }
                       

            if (orderModel==null)
            {
                return Content("Err|该订单号不存在。");
            }

            if (orderModel.FAmount == 0)
            {
                return Content("Err|该订单没有任何商品信息，不能提交。");
            }

            if(orderModel.Flag==1)
            {
                return Content("Err|该订单已经在提交中，不必重复提交。");
            }
            else if(orderModel.Flag>=2)
            {
                return Content("Err|该订单已经结算，不能重复结算。");
            }
            orderModel.Flag = 1;
            if(new T_SHO_OrderBLL().Update(orderModel))//更订单状态为1“提交中”
            {
                string status = new T_SHO_OrderBLL().SubmitOrder(Convert.ToInt32(orderId), crtby, ipLastCode, fcrimecode, userRoomNo);
                if (status == "OK|结算成功。")
                {
                    rtnPaySubmitInfo rtns = new rtnPaySubmitInfo();

                    T_Invoice invoice = new T_InvoiceBLL().GetModelList("OrderId='" + orderId + "'")[0];
                    List<T_SHO_SaleType> saleTypes = new T_SHO_SaleTypeBLL().GetModelList("PType='" + invoice.PType + "'");
                    T_Criminal criminal = new T_CriminalBLL().GetCriminalXE_info(fcrimecode, saleTypes[0].ID);
                    List<T_InvoiceDTL> details = new T_InvoiceDTLBLL().GetModelList("InvoiceNo='" + invoice.InvoiceNo + "'");
                    //rtns.OrderId = orderId;
                    //rtns.CrimeCode = criminal.FCode;
                    //rtns.CrimeName = criminal.FName;
                    //rtns.AreaName = criminal.FAreaName;
                    //rtns.OrderMoney = order.FAmount;
                    //rtns.AmountA = criminal.AmountAmoney;
                    //rtns.AmountB = criminal.AmountBmoney;
                    //rtns.AmountC = criminal.AmountCmoney;
                    //rtns.PayDate = DateTime.Now.ToShortDateString();
                    //rtns.Lists = details;
                    rtns.details = details;
                    rtns.invoice = invoice;
                    rtns.criminal = criminal;
                    JavaScriptSerializer jss = new JavaScriptSerializer();
                    return Content(status + "|" + jss.Serialize(rtns));
                }
                else
                {
                    //先将状态改回0
                    orderModel.Flag = 0;
                    new T_SHO_OrderBLL().Update(orderModel);
                    return Content("Err|"+status);
                }
            }
            else
            {
                return Content("Err|更新订单状态为提交时失败。");
            }            
        }

        public ActionResult GetGoodsStockNumber()//获取库存数量及商品属性
        {
            string gtxm = Request["GTXM"];
            T_Goods goods = new T_GoodsBLL().GetModel(gtxm);
            if (goods == null)
            {
                return Content("Error|对不起，商品信息不存在!");
            }

            //获取商品的属性
            List<T_SHO_GoodsForAttr> attrs = new T_SHO_GoodsForAttrBLL().GetModelList("GCODE='" + goods.GCODE + "'", "AttrInfo");
            JavaScriptSerializer jss = new JavaScriptSerializer();

            //获取商品库存
            List<T_GOODSSTOCKMAIN> list = new T_GOODSSTOCKMAINBLL().GetModelList(" gcode='" + goods.GCODE + "'");
            
            //Web.Config里是否需要检测库存
            //string checkStock = ConfigurationManager.ConnectionStrings["checkStock"].ConnectionString;
            string checkStock = new T_SHO_ManagerSetBLL().GetModel("YanZhenKCL").KeyMode.ToString();
            if (checkStock == "1")
            {
                if (list.Count > 0)
                {
                    return Content("OK|" + list[0].BALANCE.ToString() + "|" + jss.Serialize(attrs));
                }
                else
                {
                    return Content("OK|0|" + jss.Serialize(attrs));
                }
            }
            else
            {
                return Content("OK|99999|" + jss.Serialize(attrs));
            }
        }

        public ActionResult GetPrintXiaoPiaoFlag()//打印小票标志
        {
            try
            {
                T_SHO_ManagerSet PrintXiaoPiao = new T_SHO_ManagerSetBLL().GetModel("PrintXiaoPiao");
                return Content(PrintXiaoPiao.MgrValue);
            }
            catch
            {
                return Content("Err|获取失败");
            }
        }

        public ActionResult StopShoppingNotice()
        {
            return View();
        }
    }
    //执行结果的返回状态
    public class rtnStatus
    {
        public int orderId { get; set; }//订单号
        public string FName { get; set; }//姓名
        public string cyName { get; set; }//处遇名
        public decimal NoXiaofeimoney { get; set; }//本月可消费金额

        public decimal OkUseAllMoney { get; set; }//可用总余额

        public decimal orderMoney { get; set; }//订单金额

        public decimal Xiaofeimoney { get; set; }//本月已消费金额

        public string FAreaName { get; set; }

        public string FCrimeCode { get; set; }//狱号

        
        public List<T_SHO_OrderDTL> lists { get; set; }//订单列表

    }
    public class rtnDelResult
    {
        public int delDetailId { get; set; }
        public int orderId { get; set; }
        public decimal currXFmoney { get; set; }
        public decimal orderMoney { get; set; }
    }

    //结算返回的信息
    public class rtnPaySubmitInfo
    {
        //public string OrderId { get; set; }
        //public string CrimeCode { get; set; }
        //public string CrimeName { get; set; }
        //public string AreaName { get; set; }
        //public string PayDate { get; set; }
        //public decimal AmountA { get; set; }
        //public decimal AmountB { get; set; }
        //public decimal AmountC { get; set; }
        //public decimal OrderMoney { get; set; }
        //public List<T_SHO_OrderDTL> Lists { get; set; }
        public List<T_InvoiceDTL> details { get; set; }
        public T_Invoice invoice { get; set; }
        public T_Criminal criminal { get; set; }
    }
}