using SelfhelpOrderMgr.DAL;
using SelfhelpOrderMgr.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace SelfhelpOrderMgr.BLL
{
    public partial class T_SHO_OrderBLL
    {
        /// <summary>
        /// 获取订单列表信息
        /// </summary>
        public IEnumerable<T_SHO_Order> GetListOfIEnumerable(string strWhere)
        {
            return new T_SHO_OrderDAL().GetListOfIEnumerable( strWhere);
        }

        /// <summary>
		/// 按订单号OrderId更新订单金额Amount
		/// </summary>
        public bool UpdateMoney(int orderId, decimal gamount, string strFreeFlag)
        {
            return new T_SHO_OrderDAL().UpdateMoney(orderId, gamount, strFreeFlag);
        }

        public bool DelOrderDetailAndUpdateMoney(int orderId,int detailId)
        {
            return new T_SHO_OrderDAL().DelOrderDetailAndUpdateMoney(orderId,detailId);
        }

        /// <summary>
        /// 按订单号OrderId更新订单状态Flag
        /// </summary>
        public bool UpdateFlag(int orderId, int flag)
        {
            return new T_SHO_OrderDAL().UpdateFlag(orderId, flag);
        }

        //删除犯人的临时订单信息
        public bool DeleteOrderInfoByFCrimecode(string fcrimecode,string saleTypeId)
        {
            return new T_SHO_OrderDAL().DeleteOrderInfoByFCrimecode(fcrimecode,saleTypeId);
        }

        //订单结算
        public string SubmitOrder(int orderId, string crtby, string ipLastCode, string fcrimecode, string userRoomNo)
        {
            if (new T_InvoiceBLL().Exists(orderId))
            {
                return "Error|该订单号已经结算过了，不能再重复结算（结算提示）";
            }
            //取得当前犯人的余额信息
                T_SHO_Order order = new T_SHO_OrderDAL().GetModel(orderId);
                List<T_SHO_SaleType> saleTypes = new T_SHO_SaleTypeBLL().GetModelList("PType='" + order.PType + "'");

                T_Criminal criminal = new T_CriminalBLL().GetCriminalXE_info(fcrimecode, saleTypes[0].ID);

                if (criminal.CanUseMoneyA < 0)
                {
                    return "Error|A账户已经超过本月最大可消费额度了，请与管理人员联系";
                }

                if (criminal.CanUseMoneyB < 0)
                {
                    return "Error|B账户已经超过本月最大可消费额度了，请与管理人员联系";
                }

                List<T_SHO_OrderDTL> details = new T_SHO_OrderDTLBLL().GetModelList("OrderId='"+orderId.ToString()+"'");
                
                if(order.FAmount<=criminal.OkUseAllMoney)
                {
                    if(order.FAmount-order.FreeAmount>criminal.NoXiaofeimoney)
                    {
                        return "Error|可消费的金额不足";
                    }
                    else
                    {
                        return new T_SHO_OrderDAL().SubmitOrder(order.OrderID, crtby, ipLastCode, criminal, order, details, userRoomNo); 
                    }
                }
                else
                {
                    return "Error|账户余额不足";
                }
        }

        //按商品查询次本月购买的数量
        public decimal GetMonthBuyCount(string gtxm, string fcrimecode)
        {
            return new T_SHO_OrderDAL().GetMonthBuyCount(gtxm,fcrimecode);
        }
    }
}